name: 🚀 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Vectorpenter ${{ steps.get_version.outputs.version }}
          body: |
            ## 🔨 Vectorpenter ${{ steps.get_version.outputs.version }}
            
            **The carpenter of context — building vectors into memory**
            
            ### ✨ What's New
            - Check the commit history for detailed changes
            - See [CHANGELOG.md](CHANGELOG.md) for full release notes
            
            ### 🚀 Quick Start
            ```bash
            git clone https://github.com/doshirush1901/Vectorpenter.git
            cd vectorpenter
            cp env.example .env  # Add your API keys
            pip install -r requirements.txt
            python -m apps.cursor_chat  # Start the REPL!
            ```
            
            ### 📋 Requirements
            - Python ≥ 3.10
            - OpenAI API key (required)
            - Pinecone API key (required)
            - Typesense server (optional, for hybrid search)
            - Voyage/Cohere API keys (optional, for reranking)
            
            ### 💼 Commercial Use
            - **Community Edition**: Free under AGPL-3.0
            - **Commercial License**: Available for proprietary use
            - **Enterprise Support**: Contact us for custom solutions
            
            ### 🐛 Known Issues
            - None currently reported
            
            ### 🙏 Contributors
            Thanks to everyone who contributed to this release!
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

  build-package:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/version = "0.1.0"/version = "${{ needs.create-release.outputs.version }}"/' pyproject.toml

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/vectorpenter-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: vectorpenter-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  build-docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM python:3.11-slim
          
          WORKDIR /app
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              gcc \
              g++ \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy requirements and install Python dependencies
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          # Copy application code
          COPY . .
          
          # Create data directories
          RUN mkdir -p data/inputs data/cache data/eval
          
          # Set environment variables
          ENV PYTHONPATH=/app
          
          # Expose API port
          EXPOSE 8000
          
          # Default command
          CMD ["python", "-m", "apps.cursor_chat"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'workflow_dispatch' }}
          tags: |
            vectorpenter/vectorpenter:latest
            vectorpenter/vectorpenter:${{ needs.create-release.outputs.version }}
          platforms: linux/amd64,linux/arm64

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-package, build-docker]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.create-release.result == 'success' && needs.build-package.result == 'success' }}
        run: |
          echo "🎉 Release ${{ needs.create-release.outputs.version }} created successfully!"
          echo "📦 Package built and uploaded"
          echo "🐳 Docker image built and pushed"
          
      - name: Notify failure
        if: ${{ needs.create-release.result == 'failure' || needs.build-package.result == 'failure' }}
        run: echo "❌ Release process failed. Please check the logs."
