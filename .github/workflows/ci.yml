name: üî® CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-format:
    name: üßπ Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          pip install -r requirements.txt

      - name: Check code formatting with Black
        run: black --check --diff .

      - name: Check import sorting with isort
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type check with mypy
        run: mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  test:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r requirements.txt

      - name: Run smoke tests
        run: python tests/smoke_test.py

      - name: Run pytest
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
        continue-on-error: ${{ matrix.python-version == '3.12' }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build-docs:
    name: üìö Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements.txt

      - name: Validate README
        run: |
          python -c "
          import markdown
          with open('README.md', 'r') as f:
              content = f.read()
          html = markdown.markdown(content)
          print('README.md is valid markdown')
          "

      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1.8.0
        with:
          args: --verbose --no-progress '**/*.md' '**/*.html'
        continue-on-error: true

  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test CLI imports
        run: python -c "from apps.cli import main; print('CLI imports successfully')"

      - name: Test API imports  
        run: python -c "from apps.api import app; print('API imports successfully')"

      - name: Test Cursor Chat imports
        run: python -c "from apps.cursor_chat import CursorChat; print('Cursor Chat imports successfully')"

      - name: Test core modules
        run: |
          python -c "from core.config import settings; print('Config loaded')"
          python -c "from core.logging import logger; print('Logger initialized')"

      - name: Create test data directory
        run: mkdir -p data/inputs

      - name: Test CLI help
        run: python -m apps.cli --help

  notify:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security, build-docs, integration-test]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.lint-and-format.result == 'success' && needs.test.result == 'success' }}
        run: echo "‚úÖ All checks passed! Ready for deployment."

      - name: Notify failure
        if: ${{ needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' }}
        run: echo "‚ùå Some checks failed. Please review the results."
